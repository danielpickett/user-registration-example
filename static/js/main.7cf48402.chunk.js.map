{"version":3,"sources":["components/TextInput/TextInput.tsx","components/Form/Form.tsx","regex/regex.ts","registrationFormFields.ts","masks/numbersOnlyMask.ts","masks/phoneNumberUSAMask.ts","App.tsx","index.tsx"],"names":["TextInput","label","value","name","placeholder","touched","valid","onChange","onBlur","message","toLowerCase","className","htmlFor","id","type","e","target","Form","formFields","onSubmit","initialState","reduce","fields","field","useState","state","setState","isValidField","test","isSubmitDisabled","some","handleChange","mask","find","prev","handleBlur","map","fieldState","onClick","Object","keys","forEach","key","temp","entries","emailRegEx","numbersOnlyRegEx","registrationFormFields","bind","string","replace","numbersOnly","matchedGroups","match","App","formData","alert","JSON","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7cf48402.chunk.js","sourcesContent":["import { ChangeEvent } from 'react'\nimport './TextInput.scss'\n\nexport const TextInput = ({\n  label,\n  value,\n  name,\n  placeholder,\n  touched,\n  valid,\n  onChange,\n  onBlur,\n}: {\n  label: string\n  value: string\n  name: string\n  placeholder?: string\n  touched?: boolean\n  valid?: boolean\n  onChange?: (newValue: string, name: string) => void\n  onBlur?: (name: string) => void\n}) => {\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    if (onChange) onChange(e.target.value, name)\n  }\n\n  const message = (() => {\n    if (touched && value === '') return 'required'\n    if (value !== '' && !valid) return `Invalid ${label.toLowerCase()}`\n  })()\n\n  return (\n    <div className=\"TextInput\">\n      <div className=\"TextInput__header\">\n        <label className=\"TextInput__label\" htmlFor={name}>\n          {label}\n        </label>\n        <span className=\"TextInput__message\">{message}</span>\n      </div>\n      <input\n        className=\"TextInput__input\"\n        id={name}\n        type=\"text\"\n        value={value}\n        placeholder={placeholder}\n        onChange={handleChange}\n        onBlur={onBlur && (() => onBlur(name))}\n      />\n    </div>\n  )\n}\n","import { useState } from 'react'\nimport { TextInput } from 'components'\nimport './Form.scss'\n\nexport type FormFieldType = {\n  name: string\n  label: string\n  placeholder?: string\n  test?: (string: string) => boolean\n  mask?: (string: string) => string\n}\n\ntype FieldStateType = { value: string; touched: boolean }\ntype InitialStateType = Record<string, FieldStateType>\n\nexport const Form = ({\n  formFields,\n  onSubmit,\n}: {\n  formFields: FormFieldType[]\n  onSubmit?: (formData: Record<string, string>) => void\n}) => {\n  const initialState = formFields.reduce<Partial<InitialStateType>>(\n    (fields, field) => {\n      return {\n        ...fields,\n        [field.name]: { value: '', touched: false },\n      }\n    },\n    {}\n  ) as InitialStateType\n\n  const [state, setState] = useState(initialState)\n\n  const isValidField = (value: string, test?: (string: string) => boolean) => {\n    if (value === '') return false\n    if (!test) return true\n    if (test(value)) return true\n    return false\n  }\n\n  const isSubmitDisabled = formFields.some((field) => {\n    const { test } = field\n    const { value } = state[field.name]\n    return !isValidField(value, test)\n  })\n  const handleChange = (value: string, name: string) => {\n    const mask = formFields.find((field) => name === field.name)?.mask\n    setState((prev) => ({\n      ...prev,\n      [name]: { ...prev[name], value: mask ? mask(value) : value },\n    }))\n  }\n\n  const handleClick = () => {\n    if (isSubmitDisabled) {\n      Object.keys(state).forEach((key) => {\n        setState((prev) => ({\n          ...prev,\n          [key]: { ...prev[key], touched: true },\n        }))\n      })\n    } else {\n      const temp = Object.entries(state).reduce((fields, [key, { value }]) => {\n        return { ...fields, [key]: value }\n      }, {})\n      if (onSubmit) onSubmit(temp)\n    }\n  }\n\n  const handleBlur = (name: string) => {\n    setState((prev) => ({\n      ...prev,\n      [name]: { ...prev[name], touched: true },\n    }))\n  }\n\n  return (\n    <div className=\"Form\">\n      <h1 className=\"Form__heading\">Provider Registration</h1>\n      {formFields.map((field) => {\n        const fieldState = state[field.name]\n        return (\n          <TextInput\n            key={field.name}\n            label={field.label}\n            name={field.name}\n            value={fieldState.value}\n            placeholder={field.placeholder}\n            onChange={handleChange}\n            valid={isValidField(fieldState.value, field.test)}\n            touched={fieldState.touched}\n            onBlur={handleBlur}\n          />\n        )\n      })}\n\n      <button\n        className={`Form__button${\n          isSubmitDisabled ? ' Form__button--is-disabled' : ''\n        }`}\n        type=\"button\"\n        onClick={handleClick}\n      >\n        Submit Registration\n      </button>\n    </div>\n  )\n}\n","// TODO: this email regex is too simple. Research better ways to validate email addresses\nexport const emailRegEx = /(.+)@(.+){2,}\\.(.+){2,}/\nexport const numbersOnlyRegEx = /^[0-9]*$/\n","import { emailRegEx, numbersOnlyRegEx } from 'regex'\nimport { phoneNumberUSAMask, numbersOnlyMask } from 'masks'\nimport { FormFieldType } from 'components'\n\n// If using RegExp.test for form field tests, don't forget to bind the regex\n// to the test function. If you don't, you'll get a runtime error.\n// https://stackoverflow.com/questions/20579033/why-do-i-need-to-write-functionvalue-return-my-functionvalue-as-a-callb\n\nconst numberOnlyTest = numbersOnlyRegEx.test.bind(numbersOnlyRegEx)\nconst emailTest = emailRegEx.test.bind(emailRegEx)\n\nexport const registrationFormFields: FormFieldType[] = [\n  {\n    name: 'firstName',\n    label: 'First name',\n  },\n  {\n    name: 'lastName',\n    label: 'Last name',\n  },\n  {\n    name: 'npiNumber',\n    label: 'NPI number',\n    test: numberOnlyTest,\n    mask: numbersOnlyMask,\n  },\n  {\n    name: 'email',\n    label: 'Email',\n    test: emailTest,\n  },\n  {\n    name: 'phoneNumber',\n    label: 'Phone number',\n    // TODO: add support for international phone numbers\n    mask: phoneNumberUSAMask,\n  },\n  // TODO: break 'businessAddress' into individual fields with\n  // proper masking and validation\n  {\n    name: 'businessAddress',\n    label: 'Business address',\n    placeholder: 'Street, City, State, Zip',\n  },\n]\n","export const numbersOnlyMask = (string: string) =>\n  string.replace(/[^0-9]+/g, '')\n","export const phoneNumberUSAMask = (string: string) => {\n  const numbersOnly = string.replace(/\\D/g, '')\n  const matchedGroups = numbersOnly.match(/(\\d{0,3})(\\d{0,3})(\\d{0,4})/)\n  if (matchedGroups === null) return numbersOnly\n  return !matchedGroups[2]\n    ? matchedGroups[1]\n    : '(' +\n        matchedGroups[1] +\n        ') ' +\n        matchedGroups[2] +\n        (matchedGroups[3] ? '-' + matchedGroups[3] : '')\n}\n","import './App.scss'\nimport './theme.css'\nimport { Form } from 'components'\nimport { registrationFormFields } from 'registrationFormFields'\n\nconst App = () => {\n  const handleSubmit = (formData: Record<string, string>) => {\n    alert(JSON.stringify(formData, null, 2))\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"App__form\">\n        <Form formFields={registrationFormFields} onSubmit={handleSubmit} />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}