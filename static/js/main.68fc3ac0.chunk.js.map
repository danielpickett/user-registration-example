{"version":3,"sources":["components/TextInput/TextInput.tsx","components/RegistrationForm/RegistrationForm.tsx","regex/regex.ts","App.tsx","index.tsx"],"names":["TextInput","label","value","name","touched","valid","onChange","onBlur","message","toLowerCase","className","htmlFor","id","type","e","target","formFields","regex","undefined","initialState","reduce","fields","field","RegistrationForm","useState","state","setState","handleChange","prev","handleBlur","isValidField","test","console","log","isSubmitDisabled","some","map","fieldState","onClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAGaA,EAAY,SAAC,GAgBnB,IAfLC,EAeI,EAfJA,MACAC,EAcI,EAdJA,MACAC,EAaI,EAbJA,KACAC,EAYI,EAZJA,QACAC,EAWI,EAXJA,MACAC,EAUI,EAVJA,SACAC,EASI,EATJA,OAaMC,EACAJ,GAAqB,KAAVF,EAAqB,WACtB,KAAVA,GAAiBG,EACd,4CAD2B,WAAN,OAAkBJ,EAAMQ,eAItD,OACE,sBAAKC,UAAU,YAAf,UACE,uBAAOA,UAAU,mBAAmBC,QAASR,EAA7C,SACGF,IAEH,uBACES,UAAU,mBACVE,GAAIT,EACJU,KAAK,OACLX,MAAOA,EACPI,SAnBe,SAACQ,GAAD,OACnBR,EAASQ,EAAEC,OAAOb,MAAOC,IAmBrBI,OAAQ,kBAAMA,EAAOJ,MAEvB,sBAAMO,UAAU,qBAAhB,SAAsCF,Q,qBCrCtCQ,G,MAAa,CACjB,CAAEb,KAAM,YAAaF,MAAO,aAAcgB,WAAOC,GACjD,CAAEf,KAAM,WAAYF,MAAO,YAAagB,WAAOC,GAC/C,CAAEf,KAAM,YAAaF,MAAO,aAAcgB,MCHZ,YDI9B,CAAEd,KAAM,kBAAmBF,MAAO,mBAAoBgB,WAAOC,GAC7D,CACEf,KAAM,cACNF,MAAO,eACPgB,MCZF,4DDcA,CAAEd,KAAM,QAASF,MAAO,QAASgB,MCZT,6BDmBpBE,EAAeH,EAAWI,QAC9B,SAACC,EAAQC,GACP,OAAO,2BACFD,GADL,kBAEGC,EAAMnB,KAAO,CAAED,MAAO,GAAIE,SAAS,OAGxC,IAGWmB,EAAmB,WAAO,IAAD,EACVC,mBAASL,GADC,mBAC7BM,EAD6B,KACtBC,EADsB,KAG9BC,EAAe,SAACzB,EAAeC,GAAhB,OACnBuB,GAAS,SAACE,GAAD,mBAAC,eACLA,GADI,kBAENzB,EAFM,YAAC,eAEKyB,EAAKzB,IAFX,IAEmCD,gBAMxC2B,EAAa,SAAC1B,GAClBuB,GAAS,SAACE,GAAD,mBAAC,eACLA,GADI,kBAENzB,EAFM,YAAC,eAEKyB,EAAKzB,IAFX,IAEmCC,SAAS,UAIjD0B,EAAe,SAAC5B,EAAee,GACnC,MAAc,KAAVf,KACCe,KACDA,EAAMc,KAAK7B,KAIjB8B,QAAQC,IAAI,QAASR,GACrB,IAAMS,EAAmBlB,EAAWmB,MAAK,SAACb,GAAW,IAC3CL,EAAUK,EAAVL,MACAf,EAAUuB,EAAMH,EAAMnB,MAAtBD,MACR,OAAQ4B,EAAa5B,EAAOe,MAI9B,OADAe,QAAQC,IAAI,mBAAoBC,GAE9B,sBAAKxB,UAAU,mBAAf,UACE,oBAAIA,UAAU,4BAAd,mCACCM,EAAWoB,KAAI,SAACd,GACf,IAAMe,EAAaZ,EAAMH,EAAMnB,MAC/B,OACE,cAAC,EAAD,CAEEF,MAAOqB,EAAMrB,MACbE,KAAMmB,EAAMnB,KACZD,MAAOmC,EAAWnC,MAClBI,SAAUqB,EACVtB,MAAOyB,EAAaO,EAAWnC,MAAOoB,EAAML,OAC5Cb,QAASiC,EAAWjC,QACpBG,OAAQsB,GAPHP,EAAMnB,SAYjB,wBACEO,UAAS,kCACPwB,EAAmB,yCAA2C,IAEhErB,KAAK,SACLyB,QAjDc,WAClBN,QAAQC,IAAIR,IA2CV,qCEvESc,G,YAVH,WACV,OACE,qBAAK7B,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,EAAD,UCHR8B,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.68fc3ac0.chunk.js","sourcesContent":["import { ChangeEvent } from 'react'\nimport './TextInput.scss'\n\nexport const TextInput = ({\n  label,\n  value,\n  name,\n  touched,\n  valid,\n  onChange,\n  onBlur,\n}: {\n  label: string\n  value: string\n  name: string\n  touched: boolean\n  valid: boolean\n  onChange: (newValue: string, name: string) => void\n  onBlur: (name: string) => void\n}) => {\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) =>\n    onChange(e.target.value, name)\n\n  const message = (() => {\n    if (touched && value === '') return 'required'\n    if (value !== '' && !valid) return `Invalid ${label.toLowerCase()}`\n    return <>&nbsp;</>\n  })()\n\n  return (\n    <div className=\"TextInput\">\n      <label className=\"TextInput__label\" htmlFor={name}>\n        {label}\n      </label>\n      <input\n        className=\"TextInput__input\"\n        id={name}\n        type=\"text\"\n        value={value}\n        onChange={handleChange}\n        onBlur={() => onBlur(name)}\n      />\n      <span className=\"TextInput__message\">{message}</span>\n    </div>\n  )\n}\n","import { useState } from 'react'\nimport { TextInput } from 'components'\nimport './RegistrationForm.scss'\nimport { emailRegEx, numbersOnlyRegEx, phoneNumRegEx } from 'regex'\n\nconst formFields = [\n  { name: 'firstName', label: 'First name', regex: undefined },\n  { name: 'lastName', label: 'Last name', regex: undefined },\n  { name: 'npiNumber', label: 'NPI number', regex: numbersOnlyRegEx },\n  { name: 'businessAddress', label: 'Business address', regex: undefined },\n  {\n    name: 'phoneNumber',\n    label: 'Phone number',\n    regex: phoneNumRegEx,\n  },\n  { name: 'email', label: 'Email', regex: emailRegEx },\n] as const\n\ntype FieldNameType = typeof formFields[number]['name']\ntype FieldStateType = { value: string; touched: boolean }\ntype InitialStateType = Record<FieldNameType, FieldStateType>\n\nconst initialState = formFields.reduce<Partial<InitialStateType>>(\n  (fields, field) => {\n    return {\n      ...fields,\n      [field.name]: { value: '', touched: false },\n    }\n  },\n  {}\n) as InitialStateType\n\nexport const RegistrationForm = () => {\n  const [state, setState] = useState(initialState)\n\n  const handleChange = (value: string, name: string) =>\n    setState((prev) => ({\n      ...prev,\n      [name]: { ...prev[name as FieldNameType], value },\n    }))\n\n  const handleClick = () => {\n    console.log(state)\n  }\n  const handleBlur = (name: string) => {\n    setState((prev) => ({\n      ...prev,\n      [name]: { ...prev[name as FieldNameType], touched: true },\n    }))\n  }\n\n  const isValidField = (value: string, regex?: RegExp) => {\n    if (value === '') return false\n    if (!regex) return true\n    if (regex.test(value)) return true\n    return false\n  }\n\n  console.log('state', state)\n  const isSubmitDisabled = formFields.some((field) => {\n    const { regex } = field\n    const { value } = state[field.name]\n    return !isValidField(value, regex)\n  })\n\n  console.log('isSubmitDisabled', isSubmitDisabled)\n  return (\n    <div className=\"RegistrationForm\">\n      <h1 className=\"RegistrationForm__heading\">Provider Registration</h1>\n      {formFields.map((field) => {\n        const fieldState = state[field.name]\n        return (\n          <TextInput\n            key={field.name}\n            label={field.label}\n            name={field.name}\n            value={fieldState.value}\n            onChange={handleChange}\n            valid={isValidField(fieldState.value, field.regex)}\n            touched={fieldState.touched}\n            onBlur={handleBlur}\n          />\n        )\n      })}\n\n      <button\n        className={`RegistrationForm__button${\n          isSubmitDisabled ? ' RegistrationForm__button--is-disabled' : ''\n        }`}\n        type=\"button\"\n        onClick={handleClick}\n      >\n        Submit Registration\n      </button>\n    </div>\n  )\n}\n","export const phoneNumRegEx =\n  /^[+]?[(]?[0-9]{3}[)]?[-\\s.]?[0-9]{3}[-\\s.]?[0-9]{4,6}$/im\n\nexport const emailRegEx = /(.+)@(.+){2,}\\.(.+){2,}/\n\nexport const numbersOnlyRegEx = /^[0-9]*$/\n","import { RegistrationForm } from 'components'\nimport './App.scss'\nimport './theme.css'\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"App__form\">\n        <RegistrationForm />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}